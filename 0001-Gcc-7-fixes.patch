From 6409ae9ae239997cc1917e0b352091d1f8d1b9bd Mon Sep 17 00:00:00 2001
From: Icarus Sparry <icarus.w.sparry@intel.com>
Date: Tue, 22 Aug 2017 10:25:00 -0700
Subject: [PATCH] Gcc 7 fixes

gcc 7 adds some more diagnostics, and as we compile with diagnostics
becoming errors this causes us to fail to build. The fixes are
increasing a buffer size so gcc knows it will not overflow, adding in
multiple /* Falls through */ comments to document that the lack of
break statement is intentional, and adding gcc pragmas to indicate
that it is deliberate that we don't need the terminating NUL character
in a character array inside a struct.

Redhat have a different approach, they just turn off the warnings in
the Makefile! If their changes get accepted upstream then this patch
should probably be removed. However I think it is better to keep as
many warnings enabled as possible and just mark the false positives.

Signed-off-by: Icarus Sparry <icarus.w.sparry@intel.com>
---
 Detail.c      |  2 +-
 Grow.c        |  4 ++++
 bitmap.c      |  8 ++++++++
 mdadm.c       |  2 ++
 super-intel.c | 13 +++++++++++++
 util.c        |  1 +
 6 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/Detail.c b/Detail.c
index 509b0d4..2f4dcb0 100644
--- a/Detail.c
+++ b/Detail.c
@@ -575,7 +575,7 @@ This is pretty boring
 			printf("  Member Arrays :");
 
 			while (dir && (de = readdir(dir)) != NULL) {
-				char path[200];
+				char path[400];
 				char vbuf[1024];
 				int nlen = strlen(sra->sys_name);
 				dev_t devid;
diff --git a/Grow.c b/Grow.c
index 455c5f9..12f5af6 100755
--- a/Grow.c
+++ b/Grow.c
@@ -1257,6 +1257,7 @@ char *analyse_change(char *devname, struct mdinfo *info, struct reshape *re)
 		switch (info->new_level) {
 		case 4:
 			delta_parity = 1;
+			/* Falls through */
 		case 0:
 			re->level = 4;
 			re->before.layout = 0;
@@ -1284,10 +1285,12 @@ char *analyse_change(char *devname, struct mdinfo *info, struct reshape *re)
 
 	case 4:
 		info->array.layout = ALGORITHM_PARITY_N;
+		/* Falls through */
 	case 5:
 		switch (info->new_level) {
 		case 0:
 			delta_parity = -1;
+			/* Falls through */
 		case 4:
 			re->level = info->array.level;
 			re->before.data_disks = info->array.raid_disks - 1;
@@ -1343,6 +1346,7 @@ char *analyse_change(char *devname, struct mdinfo *info, struct reshape *re)
 		case 4:
 		case 5:
 			delta_parity = -1;
+			/* Falls through */
 		case 6:
 			re->level = 6;
 			re->before.data_disks = info->array.raid_disks - 2;
diff --git a/bitmap.c b/bitmap.c
index ccedfd3..cb65b75 100644
--- a/bitmap.c
+++ b/bitmap.c
@@ -82,13 +82,21 @@ static inline int count_dirty_bits_byte(char byte, int num_bits)
 
 	switch (num_bits) { /* fall through... */
 		case 8:	if (byte & 128) num++;
+			/* Falls through */
 		case 7:	if (byte &  64) num++;
+			/* Falls through */
 		case 6:	if (byte &  32) num++;
+			/* Falls through */
 		case 5:	if (byte &  16) num++;
+			/* Falls through */
 		case 4:	if (byte &   8) num++;
+			/* Falls through */
 		case 3: if (byte &   4) num++;
+			/* Falls through */
 		case 2:	if (byte &   2) num++;
+			/* Falls through */
 		case 1:	if (byte &   1) num++;
+			/* Falls through */
 		default: break;
 	}
 
diff --git a/mdadm.c b/mdadm.c
index c3a265b..2a1341a 100644
--- a/mdadm.c
+++ b/mdadm.c
@@ -148,6 +148,7 @@ int main(int argc, char *argv[])
 			    mode == CREATE || mode == GROW ||
 			    mode == INCREMENTAL || mode == MANAGE)
 				break; /* b means bitmap */
+			/* Falls through */
 		case Brief:
 			c.brief = 1;
 			continue;
@@ -828,6 +829,7 @@ int main(int argc, char *argv[])
 
 		case O(INCREMENTAL,NoDegraded):
 			pr_err("--no-degraded is deprecated in Incremental mode\n");
+			/* Falls through */
 		case O(ASSEMBLE,NoDegraded): /* --no-degraded */
 			c.runstop = -1; /* --stop isn't allowed for --assemble,
 					 * so we overload slightly */
diff --git a/super-intel.c b/super-intel.c
index 433bb6d..4fe5bf0 100644
--- a/super-intel.c
+++ b/super-intel.c
@@ -1811,7 +1811,10 @@ static void examine_super_imsm(struct supertype *st, char *homehost)
 	__u32 reserved = imsm_reserved_sectors(super, super->disks);
 	struct dl *dl;
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-truncation"
 	snprintf(str, MPB_SIG_LEN, "%s", mpb->sig);
+#pragma GCC diagnostic pop
 	printf("          Magic : %s\n", str);
 	snprintf(str, strlen(MPB_VERSION_RAID0), "%s", get_imsm_version(mpb));
 	printf("        Version : %s\n", get_imsm_version(mpb));
@@ -3270,6 +3273,7 @@ static void getinfo_super_imsm_volume(struct supertype *st, struct mdinfo *info,
 						<< SECT_PER_MB_SHIFT;
 			}
 		}
+			/* Falls through */
 		case MIGR_VERIFY:
 			/* we could emulate the checkpointing of
 			 * 'sync_action=check' migrations, but for now
@@ -7142,14 +7146,23 @@ static int update_subarray_imsm(struct supertype *st, char *subarray,
 
 			u->type = update_rename_array;
 			u->dev_idx = vol;
+			/* We know we want a maximum of MAX_RAID_SERIAL_LEN bytes
+			 * in the struct, and do not need it to be NUL terminated
+			 * hence these pragmas to suppress the gcc 7 warnings */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-truncation"
 			snprintf((char *) u->name, MAX_RAID_SERIAL_LEN, "%s", name);
+#pragma GCC diagnostic pop
 			append_metadata_update(st, u, sizeof(*u));
 		} else {
 			struct imsm_dev *dev;
 			int i;
 
 			dev = get_imsm_dev(super, vol);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-truncation"
 			snprintf((char *) dev->volume, MAX_RAID_SERIAL_LEN, "%s", name);
+#pragma GCC diagnostic pop
 			for (i = 0; i < mpb->num_raid_devs; i++) {
 				dev = get_imsm_dev(super, i);
 				handle_missing(super, dev);
diff --git a/util.c b/util.c
index f100972..c67a96e 100644
--- a/util.c
+++ b/util.c
@@ -335,6 +335,7 @@ unsigned long long parse_size(char *size)
 		switch (*c) {
 		case 'K':
 			c++;
+			/* Falls through */
 		default:
 			s *= 2;
 			break;
-- 
2.14.1

